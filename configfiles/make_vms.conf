# GNU Make configuration for VMS

# variables
ARCH = IA64
AR = library
LIBRARY = library
ARFLAGS = /replace
AS = macro
MACRO = macro
CC = cc
CD = builtin_cd
ECHO = builtin_echo
C++ =  cxx
CXX = cxx
CXXLD = link
CXXLINK = link
CO = co
CPP = $(CC) /preprocess_only
FC = fortran
F77 = $(FC)
F77FLAGS = $(FFLAGS)
LD = link
LEX = lex
PC = pascal
YACC = bison/yacc
YFLAGS = /Define/Verbose
BISON = bison
MAKEINFO = makeinfo
TEX = tex
TEXINDEX = texindex

RM = delete/nolog

CSTARTUP =
CRT0 =
CXXSTARTUP =
CXXRT0 =
LXLIBS =
LDLIBS =

LINK.o = $(LD) $(LDFLAGS)
LINK.obj = $(LD) $(LDFLAGS)
COMPILE.c = $(CC) $(CFLAGS) $(CPPFLAGS) $(TARGET_ARCH)
LINK.c = $(CC) $(CFLAGS) $(CPPFLAGS) $(TARGET_ARCH)
COMPILE.m = $(OBJC) $(OBJCFLAGS) $(CPPFLAGS) $(TARGET_ARCH) -c
LINK.m = $(OBJC) $(OBJCFLAGS) $(CPPFLAGS) $(LDFLAGS) $(TARGET_ARCH)
COMPILE.cc = $(CXX) $(CXXFLAGS) $(CPPFLAGS) $(TARGET_ARCH)
COMPILE.C = $(COMPILE.cc)
COMPILE.cpp = $(COMPILE.cc)
LINK.C = $(LINK.cc)
LINK.cpp = $(LINK.cc)
YACC.y = $(YACC) $(YFLAGS)
LEX.l = $(LEX) $(LFLAGS)
YACC.m = $(YACC) $(YFLAGS)
LEX.m = $(LEX) $(LFLAGS) -t
COMPILE.for = $(FC) $(FFLAGS) $(TARGET_ARCH)
COMPILE.f = $(FC) $(FFLAGS) $(TARGET_ARCH) -c
LINK.f = $(FC) $(FFLAGS) $(LDFLAGS) $(TARGET_ARCH)
COMPILE.F = $(FC) $(FFLAGS) $(CPPFLAGS) $(TARGET_ARCH) -c
LINK.F = $(FC) $(FFLAGS) $(CPPFLAGS) $(LDFLAGS) $(TARGET_ARCH)
COMPILE.r = $(FC) $(FFLAGS) $(RFLAGS) $(TARGET_ARCH) -c
LINK.r = $(FC) $(FFLAGS) $(RFLAGS) $(LDFLAGS) $(TARGET_ARCH)
COMPILE.pas = $(PC) $(PFLAGS) $(CPPFLAGS) $(TARGET_ARCH)
COMPILE.def = $(M2C) $(M2FLAGS) $(DEFFLAGS) $(TARGET_ARCH)
COMPILE.mod = $(M2C) $(M2FLAGS) $(MODFLAGS) $(TARGET_ARCH)
COMPILE.p = $(PC) $(PFLAGS) $(CPPFLAGS) $(TARGET_ARCH) -c
LINK.p = $(PC) $(PFLAGS) $(CPPFLAGS) $(LDFLAGS) $(TARGET_ARCH)
COMPILE.mar = $(MACRO) $(MACROFLAGS)
COMPILE.s = $(AS) $(ASFLAGS) $(TARGET_MACH)
LINK.S = $(CC) $(ASFLAGS) $(CPPFLAGS) $(LDFLAGS) $(TARGET_MACH)
COMPILE.S = $(CC) $(ASFLAGS) $(CPPFLAGS) $(TARGET_MACH) -c
PREPROCESS.S = $(CC) -E $(CPPFLAGS)
PREPROCESS.F = $(FC) $(FFLAGS) $(CPPFLAGS) $(TARGET_ARCH) -F
PREPROCESS.r = $(FC) $(FFLAGS) $(RFLAGS) $(TARGET_ARCH) -F
LINT.c = $(LINT) $(LINTFLAGS) $(CPPFLAGS) $(TARGET_ARCH)

MV = rename/new_version
CP = copy
.LIBPATTERNS = %.olb lib%.a

# pattern rules
(%): "%"
    @if f$$search("$@") .eqs. "" then $(LIBRARY)/CREATE/$(or $(patsubst %,TEXT,$(filter %.tlb %.TLB,$@)),$(patsubst %,HELP,$(filter %.hlb %.HLB,$@)),$(patsubst %,MACRO,$(filter %.mlb %.MLB,$@)),$(and $(patsubst %,SHARE,$(filter %.olb %.OLB,$@)),$(patsubst %,SHARE,$(filter %.exe %.EXE,$<))),OBJECT) $@
    $(AR) $(ARFLAGS) $@ $<

%.exe: %
    $(CP) $< $@

%.out: %
    @rm -f $@
    cp $< $@

# syntax is "ctangle foo.w foo.ch foo.c"
%.c: %.w %.ch
    $(CTANGLE) $^ $@
%.tex: "%.w %.ch
    $(CWEAVE) $^ $@

# RCS (ain't no SCCS on VMS)
%:: %$$5lv         # Multinet style
     if f$$search("$@") .nes. "" then +$(CHECKOUT,v)
%:: [.$$rcs]%$$5lv # Multinet style */
    if f$$search("$@") .nes. "" then +$(CHECKOUT,v)
%:: %_v            # Normal style
    if f$$search("$@") .nes. "" then +$(CHECKOUT,v)
%:: [.rcs]%_v      # Normal style
    if f$$search("$@") .nes. "" then +$(CHECKOUT,v)

# suffix rules
.SUFFIXES .out .exe .a .olb .hlb .tlb .mlb .ln .o .obj .c .cxx .cc .cpp .pas .p \
          .for .f .r .y .l .ym .yl .mar .s .ss .i .ii .mod .sym .def .h .info .dvi \
          .tex .texinfo .texi .txinfo .mem .hlp .brn .rnh .rno .rnt .rnx .w .ch .cweb \
          .web .com .sh .elc .el

.o:
    $(LINK.obj) $^ $(LOADLIBES) $(LDLIBS) -o $@
.obj:
    $(LINK.obj) $^ $(LOADLIBES) $(LDLIBS) -o $@
.s:
    $(LINK.s) $^ $(LOADLIBES) $(LDLIBS) -o $@
.S:
    $(LINK.S) $^ $(LOADLIBES) $(LDLIBS) -o $@
.c:
    $(LINK.c) $^ $(LOADLIBES) $(LDLIBS) -o $@
.cc:
    $(LINK.cc) $^ $(LOADLIBES) $(LDLIBS) -o $@
.C:
    $(LINK.C) $^ $(LOADLIBES) $(LDLIBS) -o $@
.cpp:
    $(LINK.cpp) $^ $(LOADLIBES) $(LDLIBS) -o $@
.f:
    $(LINK.f) $^ $(LOADLIBES) $(LDLIBS) -o $@
.m:
    $(LINK.m) $^ $(LOADLIBES) $(LDLIBS) -o $@
.p:
    $(LINK.p) $^ $(LOADLIBES) $(LDLIBS) -o $@
.F:
    $(LINK.F) $^ $(LOADLIBES) $(LDLIBS) -o $@
.r:
    $(LINK.r) $^ $(LOADLIBES) $(LDLIBS) -o $@
.mod:
    $(COMPILE.mod) -o $@ -e $@ $^

.def.sym:
    $(COMPILE.def) -o $@ $<

.sh:
    copy $< >$@

.obj.exe:
    $(LINK.obj) $^ $(LOADLIBES) $(LDLIBS) $(CRT0) /exe=$@
.mar.exe:
    $(COMPILE.mar) $^
    $(LINK.obj) $(subst .mar,.obj,$^) $(LOADLIBES) $(LDLIBS) $(CRT0) /exe=$@
.s.o:
    $(COMPILE.s) -o $@ $<
.s.exe:
    $(COMPILE.s) $^
    $(LINK.obj) $(subst .s,.obj,$^) $(LOADLIBES) $(LDLIBS) $(CRT0) /exe=$@
.c.exe:
    $(COMPILE.c) $^
    $(LINK.obj) $(subst .c,.obj,$^) $(LOADLIBES) $(LDLIBS) $(CRT0) /exe=$@
.cc.exe:
    $(COMPILE.cc) $^
    $(CXXLINK.obj) $(subst .cc,.obj,$^) $(LOADLIBES) $(LXLIBS) $(LDLIBS) $(CXXRT0) /exe=$@
.cxx.exe:
    $(COMPILE.cxx) $^
    $(CXXLINK.obj) $(subst .cxx,.obj,$^) $(LOADLIBES) $(LXLIBS) $(LDLIBS) $(CXXRT0) /exe=$@
.for.exe:
    $(COMPILE.for) $^
    $(LINK.obj) $(subst .for,.obj,$^) $(LOADLIBES) $(LDLIBS) /exe=$@
.pas.exe:
    $(COMPILE.pas) $^
    $(LINK.obj) $(subst .pas,.obj,$^) $(LOADLIBES) $(LDLIBS) /exe=$@

.com:
    copy $< >$@

.mar.obj:
    $(COMPILE.mar) /obj=$@ $<
.s.obj:
    $(COMPILE.s) /obj=$@ $<
.ss.obj:
    $(COMPILE.s) /obj=$@ $<
.c.i:
    $(COMPILE.c)/prep /list=$@ $<
.c.s:
    $(COMPILE.c)/noobj/machine /list=$@ $<
.i.s:
    $(COMPILE.c)/noprep/noobj/machine /list=$@ $<
.c.obj:
    $(COMPILE.c) /obj=$@ $<
.c.o:
    $(COMPILE.c) /obj=$@ $<
.cc.ii:
    $(COMPILE.cc)/prep /list=$@ $<
.cc.ss:
    $(COMPILE.cc)/noobj/machine /list=$@ $<
.ii.ss:
    $(COMPILE.cc)/noprep/noobj/machine /list=$@ $<
.cc.obj:
    $(COMPILE.cc) /obj=$@ $<
.cc.o:
    $(COMPILE.cc) /obj=$@ $<
.cxx.obj:
    $(COMPILE.cxx) /obj=$@ $<
.cxx.o:
    $(COMPILE.cxx) /obj=$@ $<
.for.obj:
    $(COMPILE.for) /obj=$@ $<
.for.o:
    $(COMPILE.for) /obj=$@ $<
.pas.obj:
    $(COMPILE.pas) /obj=$@ $<
.pas.o:
    $(COMPILE.pas) /obj=$@ $<

.y.c:
    $(YACC.y) $<
    rename y_tab.c $@
.l.c:
    $(LEX.l) $<
    rename lexyy.c $@

.texinfo.info:
    $(MAKEINFO) $<

.tex.dvi:
    $(TEX) $<

.cpp.o:
    $(COMPILE.cpp) $(OUTPUT_OPTION) $<
.f.o:
    $(COMPILE.f) $(OUTPUT_OPTION) $<
.m.o:
    $(COMPILE.m) $(OUTPUT_OPTION) $<
.p.o:
    $(COMPILE.p) $(OUTPUT_OPTION) $<
.r.o:
    $(COMPILE.r) $(OUTPUT_OPTION) $<
.mod.o:
    $(COMPILE.mod) -o $@ $<

.c.ln:
    $(LINT.c) -C$* $<
.y.ln:
    $(YACC.y) $<
    rename y_tab.c $@

.l.ln:
    @$(RM) $*.c
    $(LEX.l) $< > $*.c
    $(LINT.c) -i $*.c -o $@
    $(RM) $*.c

