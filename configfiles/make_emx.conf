# GNU Make configuration for EMX DOS Extender

# variables
AR = ar
ARFLAGS = rv
AS = as
CC = gcc
CXX = gpp
OBJC = gcc

    # This expands to $(CO) $(COFLAGS) $< $@ if $@ does not exist,
    # and to the empty string if $@ does exist.
CHECKOUT,v = +$(if $(wildcard $@),,$(CO) $(COFLAGS) $< $@)
CO = co
COFLAGS =
CPP = $(CC) -E
FC = f77
    # System V uses these, so explicit rules using them should work.
    # However, there is no way to make implicit rules use them and FC.
F77 = $(FC)
F77FLAGS = $(FFLAGS)
GET = echo no sccs get
LD = ld
LEX = flex
LINT = lint
M2C = m2c
PC = pc
YACC = bison -y
MAKEINFO = makeinfo
TEX = tex
TEXI2DVI = texi2dvi
WEAVE = weave
CWEAVE = cweave
TANGLE = tangle
CTANGLE = ctangle
RM = rm -f

LINK.o = $(CC) $(LDFLAGS) $(TARGET_ARCH)
COMPILE.c = $(CC) $(CFLAGS) $(CPPFLAGS) $(TARGET_ARCH) -c
LINK.c = $(CC) $(CFLAGS) $(CPPFLAGS) $(LDFLAGS) $(TARGET_ARCH)
COMPILE.m = $(OBJC) $(OBJCFLAGS) $(CPPFLAGS) $(TARGET_ARCH) -c
LINK.m = $(OBJC) $(OBJCFLAGS) $(CPPFLAGS) $(LDFLAGS) $(TARGET_ARCH)
COMPILE.cc = $(CXX) $(CXXFLAGS) $(CPPFLAGS) $(TARGET_ARCH) -c
COMPILE.C = $(COMPILE.c)
COMPILE.cpp = $(COMPILE.cc)
LINK.cc = $(CXX) $(CXXFLAGS) $(CPPFLAGS) $(LDFLAGS) $(TARGET_ARCH)
LINK.C = $(LINK.c)
LINK.cpp = $(LINK.cc)
YACC.y = $(YACC) $(YFLAGS)
LEX.l = $(LEX) $(LFLAGS) -t
YACC.m = $(YACC) $(YFLAGS)
LEX.m = $(LEX) $(LFLAGS) -t
COMPILE.f = $(FC) $(FFLAGS) $(TARGET_ARCH) -c
LINK.f = $(FC) $(FFLAGS) $(LDFLAGS) $(TARGET_ARCH)
COMPILE.F = $(FC) $(FFLAGS) $(CPPFLAGS) $(TARGET_ARCH) -c
LINK.F = $(FC) $(FFLAGS) $(CPPFLAGS) $(LDFLAGS) $(TARGET_ARCH)
COMPILE.r = $(FC) $(FFLAGS) $(RFLAGS) $(TARGET_ARCH) -c
LINK.r = $(FC) $(FFLAGS) $(RFLAGS) $(LDFLAGS) $(TARGET_ARCH)
COMPILE.def = $(M2C) $(M2FLAGS) $(DEFFLAGS) $(TARGET_ARCH)
COMPILE.mod = $(M2C) $(M2FLAGS) $(MODFLAGS) $(TARGET_ARCH)
COMPILE.p = $(PC) $(PFLAGS) $(CPPFLAGS) $(TARGET_ARCH) -c
LINK.p = $(PC) $(PFLAGS) $(CPPFLAGS) $(LDFLAGS) $(TARGET_ARCH)
LINK.s = $(CC) $(ASFLAGS) $(LDFLAGS) $(TARGET_MACH)
COMPILE.s = $(AS) $(ASFLAGS) $(TARGET_MACH)
LINK.S = $(CC) $(ASFLAGS) $(CPPFLAGS) $(LDFLAGS) $(TARGET_MACH)
COMPILE.S = $(CC) $(ASFLAGS) $(CPPFLAGS) $(TARGET_MACH) -c
PREPROCESS.S = $(CC) -E $(CPPFLAGS)
PREPROCESS.F = $(FC) $(FFLAGS) $(CPPFLAGS) $(TARGET_ARCH) -F
PREPROCESS.r = $(FC) $(FFLAGS) $(RFLAGS) $(TARGET_ARCH) -F
LINT.c = $(LINT) $(LINTFLAGS) $(CPPFLAGS) $(TARGET_ARCH)
.LIBPATTERNS = lib%.a $(DJDIR)/lib/lib%.a

# pattern rules
(%): %
    $(AR) $(ARFLAGS) $@ $<

%.out: %
    @rm -f $@
    cp $< $@

# syntax is "ctangle foo.w foo.ch foo.c"
%.c: %.w %.ch
    $(CTANGLE) $^ $@
%.tex: "%.w %.ch
    $(CWEAVE) $^ $@

# RCS
%:: %,v
    $(CHECKOUT,v)
%:: RCS/%,v
    $(CHECKOUT,v)
%:: RCS/%
    $(CHECKOUT,v)

# SCCS
%:: s.%
    $(GET) $(GFLAGS) $(SCCS_OUTPUT_OPTION) $<
%:: SCCS/s.%
    $(GET) $(GFLAGS) $(SCCS_OUTPUT_OPTION) $<

# suffix rules
.SUFFIXES .out .a .ln .o .c .cc .C .cpp .p .f .F .m .r .y .l .ym .yl .s .S \
          .mod .sym .def .h .info .dvi .tex .texinfo .texi .txinfo \
          .w .ch .web .sh .elc .el .obj .exe .dll .lib

.o:
    $(LINK.o) $^ $(LOADLIBES) $(LDLIBS) -o $@
.s:
    $(LINK.s) $^ $(LOADLIBES) $(LDLIBS) -o $@
.S:
    $(LINK.S) $^ $(LOADLIBES) $(LDLIBS) -o $@
.c:
    $(LINK.c) $^ $(LOADLIBES) $(LDLIBS) -o $@
.cc:
    $(LINK.cc) $^ $(LOADLIBES) $(LDLIBS) -o $@
.C:
    $(LINK.C) $^ $(LOADLIBES) $(LDLIBS) -o $@
.cpp:
    $(LINK.cpp) $^ $(LOADLIBES) $(LDLIBS) -o $@
.f:
    $(LINK.f) $^ $(LOADLIBES) $(LDLIBS) -o $@
.m:
    $(LINK.m) $^ $(LOADLIBES) $(LDLIBS) -o $@
.p:
    $(LINK.p) $^ $(LOADLIBES) $(LDLIBS) -o $@
.F:
    $(LINK.F) $^ $(LOADLIBES) $(LDLIBS) -o $@
.r:
    $(LINK.r) $^ $(LOADLIBES) $(LDLIBS) -o $@
.mod:
    $(COMPILE.mod) -o $@ -e $@ $^

.def.sym:
    $(COMPILE.def) -o $@ $<

.sh:
    cat $< >$@
    chmod a+x $@

.s.o:
    $(COMPILE.s) -o $@ $<
.S.o:
    $(COMPILE.S) -o $@ $<
.c.o:
    $(COMPILE.c) $(OUTPUT_OPTION) $<
.cc.o:
    $(COMPILE.cc) $(OUTPUT_OPTION) $<
.C.o:
    $(COMPILE.C) $(OUTPUT_OPTION) $<
.cpp.o:
    $(COMPILE.cpp) $(OUTPUT_OPTION) $<
.f.o:
    $(COMPILE.f) $(OUTPUT_OPTION) $<
.m.o:
    $(COMPILE.m) $(OUTPUT_OPTION) $<
.p.o:
    $(COMPILE.p) $(OUTPUT_OPTION) $<
.F.o:
    $(COMPILE.F) $(OUTPUT_OPTION) $<
.r.o:
    $(COMPILE.r) $(OUTPUT_OPTION) $<
.mod.o:
    $(COMPILE.mod) -o $@ $<

.c.ln:
    $(LINT.c) -C$* $<
.y.ln:
    $(YACC.y) $<
    $(LINT.c) -C$* y_tab.c
    $(RM) y_tab.c
.l.ln:
    @$(RM) $*.c
    $(LEX.l) $< > $*.c
    $(LINT.c) -i $*.c -o $@
    $(RM) $*.c

.y.c:
    $(YACC.y) $<
    mv -f y_tab.c $@
.l.c:
    @$(RM) $@
    $(LEX.l) $< > $@
.ym.m:
    $(YACC.m) $<
    mv -f y.tab.c $@
.lm.m:
    @$(RM) $@
    $(LEX.m) $< > $@

.F.f:
    $(PREPROCESS.F) $(OUTPUT_OPTION) $<
.r.f:
    $(PREPROCESS.r) $(OUTPUT_OPTION) $<

# This might actually make lex.yy.c if there's no %R% directive in $*.l,
# but in that case why were you trying to make $*.r anyway?
.l.r:
    $(LEX.l) $< > $@
    mv -f lex.yy.r $@

.S.s:
    $(PREPROCESS.S) $< > $@

.texinfo.info:
    $(MAKEINFO) $(MAKEINFO_FLAGS) $< -o $@

.texi.info:
    $(MAKEINFO) $(MAKEINFO_FLAGS) $< -o $@

.txinfo.info:
    $(MAKEINFO) $(MAKEINFO_FLAGS) $< -o $@

.tex.dvi:
    $(TEX) $<

.texinfo.dvi:
    $(TEXI2DVI) $(TEXI2DVI_FLAGS) $<

.texi.dvi:
    $(TEXI2DVI) $(TEXI2DVI_FLAGS) $<

.txinfo.dvi:
    $(TEXI2DVI) $(TEXI2DVI_FLAGS) $<

.w.c:
    $(CTANGLE) $< - $@          # The '-' says there is no '.ch' file.

.web.p:
    $(TANGLE) $<

.w.tex:
    $(CWEAVE) $< - $@           # The '-' says there is no '.ch' file.

.web.tex:
    $(WEAVE) $<

